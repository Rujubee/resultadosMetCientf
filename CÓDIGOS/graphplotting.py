
# -*- coding: utf-8 -*-
"""PlottingGraphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iq-436Dvh-L0TUlOWykAM_DNqOBLnLnw
"""

import matplotlib.pyplot as plt
import numpy as np

####### DESCONSIDERAR, NÃO CONSEGUI PLOTAR OS GRÁFICOS CORRETAMENTE
# CONJUNTOS ESPARSOS ALEATÓRIOS (gerados de forma pseudo-aleatória)

barWidth = 0.25
 
# Tempos de execução para diferentes entradas. Ordem: 'Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'
bars1 = [0.00000, 0.00000, 0.00099, 0.00000, 0.00099] # N = 35
bars2 = [0.00199, 0.00099, 0.00199, 0.01296, 0.02692] # N = 580
bars3 = [0.00398, 0.00199, 0.003988, 0.06083, 0.06083] # N = 1200
bars4 = [0.04587, 0.02593 , 0.04288, 4.36786, 9.63188 ] # N = 10000
bars5 = [0.62185, 0.31866 , 0.55601, 480.49009, 1052.98783] # N = 100000
bars6 = [8.30286, 4.13952, 7.01534, 0.0, 0.0] # N = 1000000
bars7 = [83.23420, 40.73412, 67.5850, 0.0, 0.0] # N = 8000000
 
# Set position of bar on X axis
r1 = np.arange(len(bars1))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]
r4 = [x + barWidth for x in r3]
r5 = [x + barWidth for x in r4]
r6 = [x + barWidth for x in r5]
r7 = [x + barWidth for x in r6]
 
# Make the plot
plt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='35')
plt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='580')
plt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='1.200')
plt.bar(r4, bars4, color='#b02f2a', width=barWidth, edgecolor='white', label='10.000')
plt.bar(r5, bars5, color='#90a82f', width=barWidth, edgecolor='white', label='100.000')
plt.bar(r6, bars6, color='#b02eae', width=barWidth, edgecolor='white', label='1.000.000')
plt.bar(r7, bars7, color='#2e39b0', width=barWidth, edgecolor='white', label='8.000.000')

# Add xticks on the middle of the group bars
plt.xlabel('Relação: Tempo de execução para conjuntos esparsos e pseudo-aleatórios')
plt.xticks([r + barWidth for r in range(len(bars1))], ['Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'])
 
# Create legend & Show graphic
plt.legend()
plt.show()

####### DESCONSIDERAR, NÃO CONSEGUI PLOTAR OS GRÁFICOS CORRETAMENTE
# CONJUNTOS ORDENADOS DE FORMA ASCENDENTE (com tendência a serem esparsos/diferentes e pseudo-aleatórios)

barWidth = 0.12
 
# Tempos de execução para diferentes entradas. 'Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'
bars1 = [0.00000, 0.00000, 0.00000, 0.0, 0.0] # N = 35
bars2 = [0.00099, 0.02892, 0.00099, 0.0, 0.0] # N = 580
bars3 = [0.00199, 0.12167, 0.00398, 0.0, 0.0] # N = 1200
bars4 = [0.02792, 8.92676, 0.03490, 0.0, 0.0] # N = 10000
bars5 = [0.37251, 911.56722, 0.44631, 0.0, 0.0] # N = 100000
bars6 = [4.64412, 0.0, 5.38043, 0.0, 0.0] # N = 1000000
bars7 = [44.09859, 0.0, 49.64856, 0.0, 0.0] # N = 8000000
 
# Set position of bar on X axis
r1 = np.arange(len(bars1))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]
r4 = [x + barWidth for x in r3]
r5 = [x + barWidth for x in r4]
r6 = [x + barWidth for x in r5]
r7 = [x + barWidth for x in r6]
 
# Make the plot
plt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='35')
plt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='580')
plt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='1200')
plt.bar(r4, bars4, color='#b02f2a', width=barWidth, edgecolor='white', label='10000')
plt.bar(r5, bars5, color='#90a82f', width=barWidth, edgecolor='white', label='100000')
plt.bar(r6, bars6, color='#b02eae', width=barWidth, edgecolor='white', label='1000000')
plt.bar(r7, bars7, color='#2e39b0', width=barWidth, edgecolor='white', label='8000000')

# Add xticks on the middle of the group bars
plt.xlabel('Relação: Tempo de execução para conjuntos esparsos e pseudo-aleatórios')
plt.xticks([r + barWidth for r in range(len(bars1))], ['Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'])
 
# Create legend & Show graphic
plt.legend()
plt.show()

####### DESCONSIDERAR, NÃO CONSEGUI PLOTAR OS GRÁFICOS CORRETAMENTE
# CONJUNTOS ORDENADOS DE FORMA DESCENDENTE (com tendência a serem esparsos/diferentes e pseudo-aleatórios)

barWidth = 0.12
 
# Tempos de execução para diferentes entradas. Ordem: 'Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'
bars1 = [0.00000, 0.0, 0.00099, 0.0, 0.0] # N = 35
bars2 = [0.00199, 0.0, 0.00199, 0.0, 0.0] # N = 580
bars3 = [0.00498, 0.0, 0.00299, 0.0, 0.0] # N = 1200
bars4 = [0.05285, 0.0, 0.03441, 0.0, 0.0] # N = 10000
bars5 = [0.71011, 0.0, 0.43284, 0.0, 0.0] # N = 100000
bars6 = [9.05566, 0.0, 5.29750, 0.0, 0.0] # N = 1000000
bars7 = [78.82220, 0.0, 48.34115, 0.0, 0.0] # N = 8000000
 
# Set position of bar on X axis
r1 = np.arange(len(bars1))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]
r4 = [x + barWidth for x in r3]
r5 = [x + barWidth for x in r4]
r6 = [x + barWidth for x in r5]
r7 = [x + barWidth for x in r6]
 
# Make the plot
plt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='35')
plt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='580')
plt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='1200')
plt.bar(r4, bars4, color='#b02f2a', width=barWidth, edgecolor='white', label='10000')
plt.bar(r5, bars5, color='#90a82f', width=barWidth, edgecolor='white', label='100000')
plt.bar(r6, bars6, color='#b02eae', width=barWidth, edgecolor='white', label='1000000')
plt.bar(r7, bars7, color='#2e39b0', width=barWidth, edgecolor='white', label='8000000')

# Add xticks on the middle of the group bars
plt.xlabel('Relação: Tempo de execução para conjuntos esparsos e pseudo-aleatórios')
plt.xticks([r + barWidth for r in range(len(bars1))], ['Timsort', 'Quicksort', 'MergeSort', 'Ins.Sort', 'Bubblesort'])
 
# Create legend & Show graphic
plt.legend()
plt.show()